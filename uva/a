#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define MAX 2048
int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}
int main(){
	int n, no, i, j, s, carry, count;
	char *str, ch;
	int a[26];
	memset(a, 0, sizeof(a));
	int b[26];
	str = malloc(sizeof(char) * MAX);
	scanf("%d", &n);
	getchar();
		while((ch = getchar()) != EOF){
			if(ch <= 'Z' && ch >= 'A')
				a[ch - 'A']++;
			else if(ch <= 'z' && ch >= 'a')
				a[ch - 'a']++;
		}
		for(i = 0; i < 26; i++)
			b[i] = a[i];
		qsort(a, 26, sizeof(int), cmpfunc);	
		for(i = 25; i >= 0; i--){
			no = a[i];
			if(!no)
				break;
			j = 0;
			while(b[j] != no)
				j++;
			b[j] = 0;
			printf("%c %d\n", j + 'A', no);
		}
	
	return 0;
}
#include<stdio.h>
int main(){
	long long int a, b;
	int i, j, s, carry, count;
	scanf("%lld %lld", &a, &b);
	while(a != 0 || b != 0){
		carry = count = 0;
		while(1){
			if(a){
				i = a % 10;
				a /= 10;
			}
			else 
				i = 0;
			if(b){
				j = b % 10;
				b /= 10;
			}		
			else
				j = 0;
	
			s = i + j + carry;
			if(s > 9){
				count++;
				carry = 1;
			}
			else
				carry = 0;
			if(a == 0)
				if(b == 0)
					break;
		}
		if(count > 1)		
			printf("%d carry operations.\n", count);
		else if(count == 1)
			printf("1 carry operation.\n");
		else
			printf("No carry operation.\n");
		
		scanf("%lld %lld", &a, &b);
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
int main(){
	int array[3000], hash[3000];
	int i, j, k, n, temp, flag;
	while(scanf("%d", &n) != EOF){
		flag = 0;
		memset(hash, 0, sizeof(hash));
		for(i = 0; i < n; i++){
			scanf("%d", &temp);
			array[i] = temp;
		}
		for(i = 0; i < n-1; i++){
			temp = array[i] - array[i+1];
			if(temp < 0)
				temp = -1 * temp;
			hash[temp]++;
		}
		for(i = 1; i < n; i++){
			if(!hash[i]){
				flag = 1;
				break;
			}
		}
		if(flag)
			printf("Not jolly\n");
		else
			printf("Jolly\n");
	}
	return 0;
}
#include<stdio.h>
int main(){
	int a[16], n, i, j, min, count, sum;
	char c;
	scanf("%d", &n);
	while(n){
	for(i = 0; i < n; i++){
		count = 0;
		for(j = 0; j < 25; j++){
			c = getchar();
			if(c == 'X')
				continue;
			if(c == ' ')
				count++;
		}
		getchar();
		a[i] = count;
	}
	min = a[0];
	for(j = 0; j < i; j++){
		if(a[j] < min)
			min = a[j];
	}
	sum = 0;
	for(j = 0; j < i; j++){
			a[j] = a[j] - min;
			sum += a[j];
	}
	printf("%d\n", sum);
	scanf("%d", &n);
	}
	return 0;
}
#include<stdio.h>
#define max(a, b) (a > b) ? (a) : (b)
int lcss(int *X, int  *Y, int m, int n )
{
   int L[m+1][n+1];
   int i, j;
  
   /* Following steps build L[m+1][n+1] in bottom up fashion. Note 
      that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] */
   for (i=0; i<=m; i++)
   {
     for (j=0; j<=n; j++)
     {
       if (i == 0 || j == 0)
         L[i][j] = 0;
  
       else if (X[i-1] == Y[j-1])
         L[i][j] = L[i-1][j-1] + 1;
  
       else
         L[i][j] = max(L[i-1][j], L[i][j-1]);
     }
   }
    
   /* L[m][n] contains length of LCS for X[0..n-1] and Y[0..m-1] */
   return L[m][n];
}
int main(){
	int ar[102], br[102];
	int count, temp, a, b, i, j, n, q, m;
	scanf("%d %d", &n, &m);
	count = 1;
	while(n != 0 && m != 0){
		for(i = 0; i < n; i++)
			scanf("%d", &ar[i]);
		for(i = 0; i < m; i++)
			scanf("%d", &br[i]);
		q = lcss(ar, br, n, m);
		printf("Twin Towers #%d\nNumber of Tiles : %d\n\n", count++, q);
		scanf("%d %d", &n, &m);
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
int main(){
	long long int count, temp, b, i, j, n, q;
	while(1){
		scanf("%lld", &n);
		if( n < 0)
			break;
		temp = (n * (n-1) / 2) + n;
		printf("%lld\n", temp + 1);
	}
	return 0;
}
#include<stdio.h>
#include<math.h>
int main(){
	long long int n, x;
	scanf("%lld", &n);
	while(n != 0){
		x = sqrt(n);
		if(n ==  x * x)
			printf("yes\n");
		else
			printf("no\n");
		scanf("%lld", &n);	
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
int main(){
	char a[101][101];
	int b[101][101];
	int n, m, i, j, k, l, flag = 0;
	scanf("%d %d", &n, &m);
	long int count = 1;
	while(n != 0 && m != 0){
	memset(b, 0, sizeof(b));
	for(i = 0; i < n; i++){
		scanf("%s", a[i]);
	}
	for(i = 0; i < n; i++){
		for(j = 0; j < m; j++){
			if(a[i][j] == '*'){
				b[i][j] = '*';
				for(k = i-1; k <= i+1; k++){
					for(l = j-1; l <= j+1; l++){
						if(k >=0 && l >= 0){
							if(b[k][l] != '*')
								b[k][l]++;	
						}
					}
				}
			}
		}
	}
	if(flag)
		printf("\n");
	flag = 1;
	printf("Field #%ld:\n", count);
	for(i = 0; i < n; i++){
		for(j = 0; j < m; j++){
			if(b[i][j] == '*')
				printf("%c", '*');
			else
				printf("%d", b[i][j]);
		}
		printf("\n");
	}
/*	printf("\n");*/
	count++;
	scanf("%d %d", &n, &m);
	}
	return 0;
}
#include<stdio.h>
int main(){
	long long int i, n, b1, g1, c1, b2, g2, c2, b3, g3, c3;
	while(scanf("%lld %lld %lld %lld %lld %lld %lld %lld %lld ", &b1, &g1, &c1, &b2, &g2, &c2, &b3, &g3, &c3) != EOF){
		for(i = 0; i < n; i++){
			scanf("%d", &temp);
			sum += temp;
			array[i] = temp;
		}
		avg = sum / n;
		sum = 0;
		for(i = 0; i < n; i++){
			array[i] = array[i] - avg;
			if(array[i] > 0)
				sum += array[i];
		}
		printf("Set #%d\nThe minimum number of moves is %d.\n\n", count, sum);
		scanf("%d", &n);
		count++;
	}
	return 0;
}
#include<stdio.h>
#include<stdlib.h>
int main(){
	long int n, k, j, i, s, p, count;
	int t,f;
	scanf("%d", &t);
	while(t--){
		scanf("%d", &f);
		count = 0;	
		for(i = 0; i < f; i++){
			scanf("%ld %ld %ld", &s, &n, &p);
			if(n > s)
				n = s;
			count += s * p;
		}
		printf("%ld\n", count);
	}
	return 0;
}
#include<stdio.h>
int main(){
	int t, i, a, b;
	long int sum;
	scanf("%d", &t);
	for(i = 1; i <= t; i++){
		sum = 0;
		scanf("%d %d", &a, &b);
		if(a % 2)
		while(a <= b){
			sum += a;
			a += 2;
		}
		else{
			a++;
			while(a <= b){
				sum += a;
				a += 2;
			}
		}
		printf("Case %d: %ld\n", i, sum);
	}
	return 0;
}
#include<stdio.h>
int main(){
	int n, i, oldn, count;
	int a[52000];
	while(scanf("%d", &n) && n != 0){
		if(n > 2){
		for(i = 1; i <= n; i++){
			a[i] = i;
		}
		oldn = n;
		n++;
		count = 0;
		printf("Discarded cards:");
		i = 1;
		while(1){
			if(a[i]){
				printf(" %d,", a[i]);
				count++;
				a[i] = 0;
			}
			i++;
			a[n++] = a[i];
			a[i] = 0;
			i++;
			if(count == oldn - 2){
				break;
			}
		}
		for(i = 1; i < n; i++){
			if(a[i]){
				printf(" %d\n", a[i++]);
				break;
			}
		}
		printf("Remaining card: ");
		while(i < n){
			if(a[i]){
				printf("%d\n", a[i]);
				break;
			}
		}		
		}
		else{
			if(n == 1){
			printf("Discarded cards:\n");
			printf("Remaining card: 1\n");

			}
			if(n == 2){
			printf("Discarded cards: 1\n");
			printf("Remaining card: 2\n");
			}

		}
	}
	return 0;
}			
#include<stdio.h>
int main(){
	int t;
	long long int count, temp, a, b, i, j, n, q;
	scanf("%d", &t);
	while(t--){
		scanf("%lld %lld", &a, &b);
		if(a < b){
			printf("<\n");
		}
		else if( a > b){
			printf(">\n");
		}
		else{
			printf("=\n");
		}
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
int main(){
	int t, i, j, count, g, n, l, size, m;
	char c[104], ch;
	while((scanf("%d", &g)) && g != 0){
		scanf("%s", c);
		l = strlen(c);
		size = l / g;
		for(i = 0; i < l;){
			for(j = i + 0, m = i+size-1; j <= m; ){
				ch = c[j];
				c[j] = c[m];
				c[m] = ch;
				j++;
				m--;
			}
			i += size;	
		}
		printf("%s\n", c);
	}
	return 0;
}
#include<bits/stdc++.h>
using namespace std;
int main(){
	int t, i, j, count, l;
	list < char > mylist;
	list < char > ::iterator it;
	char c[100002];
	while(scanf("%s", c) != EOF){
		it = mylist.begin();
		l = strlen(c);
		for(i = 0; i < l; i++){
			if(c[i] == '[')
				it = mylist.begin();
			else if(c[i] == ']')
				it = mylist.end();
			else
				mylist.insert(it, c[i]);
		}
		for(it = mylist.begin(); it != mylist.end(); it++)
			printf("%c", *it);
		printf("\n");
		mylist.clear();
	}
	return 0;
}
#include <bits/stdc++.h>
using namespace std;
map<long int, int> mymap;
map<long int, int>::iterator it;
int main(){
	int t, i, j;
        long int ans, n, m, temp, count1, count2;
        scanf("%d", &t);
	while(t--){
                scanf("%ld %ld", &n, &m);
                for(i = 0; i < n; i++){
                        scanf("%ld", &temp);
			mymap[temp]++;
                }
                for(i = 0; i < m; i++){
                        scanf("%ld", &temp);
			mymap[temp]--;
                }
		ans = 0;
		for(it = mymap.begin(); it !=  mymap.end(); it++){
			ans += abs(it->second);
		}
		printf("%ld\n", ans);
		mymap.clear();
	}
	return 0;
}
#include<stdio.h>
int compare(void *a, void *b){
	int *c = (int *)a;
	int *d = (int *)b;
	
	return *c - *d;
}
int main(){
	int n, i, m, t, my, max, j, count;
	int a[54000], b[101];
	scanf("%d", &t);
	while(t--){
		count = 0;
		scanf("%d %d", &n, &m);
		for(i = 0; i < n; i++){
			scanf("%d", &a[i]);
			b[i] = a[i];
		}
		my = b[m];
		qsort(b, n, sizeof(int), compare);
		max = n-1;
		j = 0;
		while(1){
			while(a[j] < b[max]){
				a[i++] = a[j];
				if(j == m)
					m = i-1;
				a[j++] = 0;
			}
			if(a[j] == my)
				break;
			a[j++] = 0;
			count++;
			max--;
		}
		for(i = j; ;i++){
			if(a[i] == my){
				if( i == m){
					printf("%d\n", count+1);
					break;
				}
				count++;
			}
		}
	}
	return 0;
}			
#include<stdio.h>
#include<string.h>
int main(){
	long int ans, a[10002], b[10002], n, m, temp;
	scanf("%ld", &n);
	while(n){
		ans =(n * (n+1) * (2*n+1)) / 6;
		printf("%ld\n",ans);
		scanf("%ld", &n);
	}
	return 0;
}
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 1024
/*
char *getlines(char *str){
	char ch;
	int i = 0;
	while((ch = getchar()) != '\n' || ch != EOF)
		str[i++] = ch;
	str[i] = ch;
	return str;
}*/
int main(){
	char ch;
	long int a[MAX], none, done;
	long int i, j, count, k;
/*	str = (char *)malloc(sizeof(char) * 2048);*/
	while((ch = getchar())!= EOF){
		memset(a, 0, sizeof(a));
		i = k = count = 0;
		while(ch != '\n' && ch != EOF){
			if(ch == ' '){
				while(ch == ' '){
					a[i]++;
					ch = getchar();
				}
				i++;
			}
			ch = getchar();
		}
/*		for(j = 0; j < i; j++)
		printf("%d ", a[j]);*/
		none = 1;
		while(none){
			none = done = 0;
		for(j = 0; j < i; j++){
			if(a[j] > 1){
				done = 1;
				a[j] = (a[j] % 2) + a[j] / 2;
				if(a[j] > 1)
					none = 1;
			}
		}
			if(done)
			count++;
		}
		printf("%ld\n", count);
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
#define MAX 102
typedef struct node{
	int x;
	int y;
	int r;
}node;
node c[MAX];
int main(){
	long int count, temp, b, i,r,  j, n, q, t, rx, ry, yx, yy, y, x, flag;
	scanf("%ld", &t);
	for(q = 1; q <= t; q++){
		scanf("%ld %ld", &n, &y);
		for(i = 0; i < n; i++){
			scanf("%ld %ld %ld", &rx, &ry, &r);
			c[i].x = rx;
			c[i].y = ry;
			c[i].r = r;
		}
		printf("Case %ld:\n", q);
		for(i = 0; i < y; i++){
			scanf("%ld %ld", &yx, &yy);
			flag = 0;
			for(j = 0; j < n; j++){
				temp = (c[j].x-yx) * (c[j].x - yx) +  (c[j].y-yy) * (c[j].y - yy);
					if(c[j].r * c[j].r >= temp){
						flag = 1;
						printf("Yes\n");
						break;
					}
			}
			if(!flag)
				printf("No\n");
		} 
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
int main(){
	int t, n, k, i, count, prev;
	long int ans;
	char ar[100];
	scanf("%d", &t);
	while(t--){
		scanf("%s", ar);
		n = strlen(ar);
		prev = 1; count = 0; ans = 0;
		for(i = 0; i < n; i++){
			if(ar[i] == 'O'){
			if(!prev){
				count++;
				ans += count;
			}
			else{
				count = 1;
				prev = 0;
				ans += count;
			}	
			}
			else{
				prev = 1;
				count = 0;
			}
		}
		printf("%ld\n", ans);
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
void check(char *string, int i){
	char mirror[32], c;
	int notpal, notmir, start, end;
	notpal = notmir = 0;
	start = 0;
	end = i-2;
	while(start < end){
		if(string[start] == string[end]){
			start++;
			end--;
		}
		else{
			notpal = 1;
			break;
		}
	}
	start = 0;
	end = i-2;
	while(start <= end){
		c = string[start];
		if(c == 'A' || c == 'H' || c == 'I'|| c == 'M'|| c == '0'|| c == '1' || c == '8' || c == 'O'|| (c >= 'T' && c <= 'Y'))
			mirror[start] = c;
		else if( c == 'E')
			mirror[start] = '3';
		else if( c == 'J')
			mirror[start] = 'L';
		else if( c == 'L')
			mirror[start] = 'J';
		else if( c == 'S')
			mirror[start] = '2';
		else if( c == 'Z')
			mirror[start] = '5';	
		else if( c == '2')
			mirror[start] = 'S';	
		else if( c == '3')
			mirror[start] = 'E';	
		else if( c == '5')
			mirror[start] = 'Z';	
		else{
			notmir = 1;
			break;
		}
		start++;
	}
	if(!notmir){
		start = 0;
		while(start <= end){
/*		for(j = 0; j < i-1; j++){*/
			if(mirror[start] == string[end]){
			 	start++;
				end--;
			}
			else{
				notmir = 1;
				break;
			}
				
		}
	}
	if(!notpal && !notmir)
		printf("%s -- is a mirrored palindrome.\n\n", string);
	else if(!notmir)
		printf("%s -- is a mirrored string.\n\n", string);
	else if(!notpal)
		printf("%s -- is a regular palindrome.\n\n", string);
	else if(notpal)
		printf("%s -- is not a palindrome.\n\n", string);
}

int main(){
	char string[32], ch;
	int i;
/*
	while((ch = getchar_unlocked()) != EOF){
		string[i++] = ch;
		if( ch == '\n'){
			check(string, i);	
			i = 0;	
		}
	}*/

	while(scanf("%s", string) != EOF){
		check(string, strlen(string) + 1);
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
#define MAX 132
int main(){
	char a[MAX];
	char t, c;
	long int count, temp, b, i, j, q, sum;
	c = getchar();
	while(c != EOF){
		while(c != '\n' && c != '!' && c != EOF){
			sum = 0;
			while(c >= '0' && c <= '9'){
				sum += c - '0';
				c = getchar();
			}
			for(i = 0; i < sum; i++){
				if(c == 'b')
					printf(" ");
				else if(c == '!')
					printf("\n");
				else
					printf("%c", c);
			}
			c = getchar();
		}
		if(c == EOF)
			break;
		printf("\n");
		c = getchar();
	}
	return 0;
}
#include<stdio.h>
int main(){
	int i, j, k, l, a, b, n;
	scanf("%d", &n);
	while(n--){
		scanf("%d %d", &a, &b);
		for(l = 1; l <= b; l++){
		for(i = 1; i <= a; i++){
			for(j = 1; j <= i; j++)
				printf("%d", i);
			printf("\n");
		}
		for(i = a-1; i >= 1; i--){
			for(j = 1; j <= i; j++)
				printf("%d", i);
			printf("\n");
		}
		if(l != b)	
			printf("\n");
		}
		if(n > 0)
			printf("\n");
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
#include<ctype.h>
int main(){
        long long int count, temp, c, b, i, j, n, q, inw;
        while((c = getchar())!= EOF){
                q = 0;
                while(c != '\n'){
                        inw = 0;
                        while(isalpha(c)){
                                if(!inw)
                                        q++;
                                inw = 1;
                                c = getchar();
                        }
                        if(c == '\n')
                                break;
                        c = getchar();
                }
                printf("%lld\n", q);
        }
        return 0;
}

#include<stdio.h>
#include<string.h>
int search(char *pre, char c, int n){
	int i;
	for(i = 0; i < n; i++)
		if(pre[i] == c)
			return i;
	return -1;
}
void postorder(char *pre, char *in, int len){
	int root;
	root = search(in, pre[0], len);
	if(root != 0)
		postorder(pre+1, in, root);
	if(root != len-1)
		postorder(pre+root+1, in+root+1, len-root-1);
	printf("%c", pre[0]);	
}
int main(){
	char pre[26], in[26];
	int i, j, k, temp;
	while(scanf("%s%s", pre, in) != EOF){
		postorder(pre, in, strlen(pre));
		printf("\n");	
	}
	return 0;
}
#include<stdio.h>
int main(){
	int array[64];
	int i, n, count, avg, sum, temp;
	scanf("%d", &n);
	count = 1;
	while(n){
		sum = 0;
		for(i = 0; i < n; i++){
			scanf("%d", &temp);
			sum += temp;
			array[i] = temp;
		}
		avg = sum / n;
		sum = 0;
		for(i = 0; i < n; i++){
			array[i] = array[i] - avg;
			if(array[i] > 0)
				sum += array[i];
		}
		printf("Set #%d\nThe minimum number of moves is %d.\n\n", count, sum);
		scanf("%d", &n);
		count++;
	}
	return 0;
}
#include<stdio.h>
#include<string.h>
int a[7500] = {0};
int b[5] = {1, 5, 10, 25, 50};
void  change(){
	int i, j;
	a[0] = 1;
	for(i = 0; i < 5; i++)
		for(j = b[i]; j <= 7500; j++)
			a[j] += a[j-b[i]]; 
}
int main(){
	int n;
	change();
	while(scanf("%d", &n) != EOF){
		printf("%d\n", a[n]);
	}
	return 0;
}
char *readline() {
	long int count = 0;
	string = malloc(sizeof(char) * 1024);
	char ch;
	while((ch = getchar()) != EOF && ch != '\n')
		string[count++] = ch;
	string[count] = '\0';
	return string;
}
char *readline() {
	int count = 0;
	char ch;
	while(count < len && (ch = getchar()) != EOF && ch != '\n')
		string[count++] = ch;
	string[count] = '\0';
	return count;
}
